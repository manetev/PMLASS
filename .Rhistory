install.packages("plotly")
require(grDevices) # for colours
x <- -6:16
op <- par(mfrow = c(2, 2))
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
z <- outer(x, sqrt(abs(x)), FUN = "/")
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
x <- -50:50
op <- par(mfrow = c(2, 2))
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
z <- outer(x, sqrt(abs(x)), FUN = "/")
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
op
class (op)
class(opmfrow)
class(op$mfrow)
outer ( x,x)
summary ( outer ( x,x))
class ( outer ( x,x))
str ( outer ( x,x))
help ( par)
plot (  x,x)
help( outer)
data(topo, package="MASS")
topo.kr <- surf.gls(2, expcov, topo, d=0.7)
library ( spatial)
topo.kr <- surf.gls(2, expcov, topo, d=0.7)
prsurf <- prmat(topo.kr, 0, 6.5, 0, 6.5, 50)
contour(prsurf, levels=seq(700, 925, 25))
contour(prsurf, levels=seq(700, 925, 25))
class(prsurf)
str(prsurf)
summary(prsurf)
summary(prsurf)
prsurf$x
plot(prsurf$x, prsurf$y)
prsurf$x
contour(prsurf, levels=seq(700, 925, 25))
prsurf$y
scatterplot3d(prsurf$x, prsurf$y)
prsurf$z
expcov
topo.kr
class(topo.kr)
class(topo.kr$beta)
prsurf
class(prsurf)
class(prsurf[1])
image (prsurf)
x1 = readWKT("MULTILINESTRING((2 2,2 0),(2 2,0 2))")
library( rgeos)
install.packages.("rgeos")
install.packages("rgeos")
library( rgeos)
pol1 <- readWKT(paste("POLYGON((39.936 43.446, 39.94 43.446, 39.94 43.45,",
"39.936 43.45, 39.936 43.446))"))
pol2 <- readWKT(paste("POLYGON((39.9417 43.45, 39.9395 43.4505,",
"39.9385 43.4462, 39.9343 43.4452, 39.9331 43.4469, 39.9417 43.45))"))
plot(pol2, axes=TRUE)
plot(pol1, add=TRUE, border="blue")
gIsValid(pol1)
gIsValid(pol2)
try(res <- gUnion(pol1, pol2))
if (version_GEOS0() > "3.4.0") {
pol2a <- gPolygonize(gNode(as(pol2, "SpatialLines")))
try(res <- gUnion(pol1, pol2a))
x = readWKT(paste("POLYGON((0 40,10 50,0 60,40 60,40 100,50 90,60 100,60",
"60,100 60,90 50,100 40,60 40,60 0,50 10,40 0,40 40,0 40))"))
x = readWKT(paste("POLYGON((0 40,10 50,0 60,40 60,40 100,50 90,60 100,60",
"60,100 60,90 50,100 40,60 40,60 0,50 10,40 0,40 40,0 40))"))
ch = gConvexHull(x)
plot(x,col='blue',border='blue')
plot(ch,add=TRUE)
contourplot(as.matrix(df[, 1:10]), at=c(0.1,0.2,0.3, 0.6, 0.9),
label.style="align")
require (lattice)
contourplot(as.matrix(df[, 1:10]), at=c(0.1,0.2,0.3, 0.6, 0.9),
label.style="align")
image(volcano)
contour(volcano,add=TRUE)
class( volcano)
volcano
help(contour)
data(meuse.grid)
library( gstat)
install.packages("gstat")
data(meuse.grid)
library(gstat)
data(meuse.grid)
library(sp)
data(meuse.grid)
coordinates(meuse.grid) = c("x", "y")
gridded(meuse.grid) <- TRUE
x = as(meuse.grid, "SpatialPixelsDataFrame")
spplot(x["dist"])
spplot(x["dist"], contour=TRUE, region=FALSE)
class( x )
spplot(x["dist"], contour=TRUE, region=TRUE)
plot (x)
x@data
str( x@data)
summary( x)
x["dist"]
head( x["dist"])
class( x["dist"])
spplot(meuse["dist"], colorkey = list(
right = list( # see ?levelplot in package trellis, argument colorkey:
fun = draw.colorkey,
args = list(
key = list(
at = seq(0, 1, .1), # colour breaks
col = bpy.colors(11), # colours
labels = list(
at = c(0, .2, .4, .6, .8, 1),
labels = c("0x", "20x", "40x", "60x", "80x", "100x")
)
)
)
)
))
data("meuse")
spplot(meuse["dist"], colorkey = list(
right = list( # see ?levelplot in package trellis, argument colorkey:
fun = draw.colorkey,
args = list(
key = list(
at = seq(0, 1, .1), # colour breaks
col = bpy.colors(11), # colours
labels = list(
at = c(0, .2, .4, .6, .8, 1),
labels = c("0x", "20x", "40x", "60x", "80x", "100x")
)
)
)
)
))
spplot(meuse.grid["dist"], colorkey = list(
right = list( # see ?levelplot in package trellis, argument colorkey:
fun = draw.colorkey,
args = list(
key = list(
at = seq(0, 1, .1), # colour breaks
col = bpy.colors(11), # colours
labels = list(
at = c(0, .2, .4, .6, .8, 1),
labels = c("0x", "20x", "40x", "60x", "80x", "100x")
)
)
)
)
))
spplot(meuse.grid["dist"], colorkey = list(
right = list( # see ?levelplot in package trellis, argument colorkey:
fun = draw.colorkey,
args = list(
key = list(
at = seq(0, 1, .1), # colour breaks
col = bpy.colors(11), # colours
labels = list(
at = c(0, .2, .4, .6, .8, 1),
labels = c("0x", "20x", "40x", "60x", "80x", "100x")
)
)
)
)
))
help( "draw.colorkey")
spplot(meuse.grid, c("f","g"), col.regions=bpy.colors(10))
spplot(meuse.grid, c("f","g"), col.regions=bpy.colors(10))
meuse.grid
spplot(x["dist"], contour=TRUE, region=TRUE)
spplot(x["dist"], contour=FALSE, region=TRUE)
library( raster)
library( ggplot2)
library ( caret)
setwd( "C:/Users/Flomanu/Documents/Manu/Tech/R stuff/Practical Machine Learning/Assignement")
PMLTrain<-read.csv (  file = "pml-training.csv")
colPML<-colnames( PMLTrain)
##### Check column with missing values
NAcol <-sapply (colPML, MyNa<-function (x) { sum ( is.na(PMLTrain[,x]) )}  )
####  NAcol column with NA value zero NAvalue
#### We keep PMLTrain column  with zero  NA value
PMLTrainInUse<-PMLTrain[NAcol==0]
PMLTrainNotUse<-PMLTrain[NAcol!=0]
####   93 columns kept over  160
#####  Remove Factor columns  --  Factor column contains DIV0 value
colPML<-colnames( PMLTrainInUse)
Factorcol <-sapply (colPML, MyFactor<-function (x) { sum ( x!="classe" && is.factor(PMLTrainInUse[,x]) )}  )
PMLTrainInUse<-PMLTrainInUse[Factorcol==0]
length(colnames(PMLTrain))
length(colnames(PMLTrainInUse))
####   56 columns kept over  160
#### Remove non Usable Variable
PMLTrainInUse$"user_name" <-NULL
PMLTrainInUse$"X" <-NULL
PMLTrainInUse$"raw_timestamp_part_1" <-NULL
PMLTrainInUse$"raw_timestamp_part_2" <-NULL
colnames(PMLTrainInUse)
summary(PMLTrainInUse)
ForearmCol<- grep ( "_forearm",  colPML)
BeltCol<-colPML[ grep ( "_belt",  colPML)]
ArmCol<-colPML[ grep ( "_arm",  colPML)]
DumbbellCol<-colPML[ grep ( "dumbbell",  colPML)]
length(ForearmCol) + length( BeltCol) + length ( ArmCol)+ length ( DumbbellCol)
length(colPML)
featurePlot(x = PMLTrainInUse[, ForearmCol[1:4]],
y = PMLTrainInUse$classe,
plot = "density",
## Add a key at the top
auto.key = list(columns = 4))
colPML
featurePlot(x = PMLTrainInUse[,c("skewness_yaw_dumbbell", "gyros_dumbbell_x"),
y = PMLTrainInUse$classe,
plot = "density",
## Add a key at the top
auto.key = list(columns = 4))
featurePlot(x = PMLTrainInUse[,c("skewness_yaw_dumbbell", "gyros_dumbbell_x")],
y = PMLTrainInUse$classe,
plot = "density",
## Add a key at the top
auto.key = list(columns = 4))
PMLTrainInUse[,c("skewness_yaw_dumbbell", "gyros_dumbbell_x")]
PMLTrainInUse[c("skewness_yaw_dumbbell", "gyros_dumbbell_x")]
PMLTrainInUse[1,c("skewness_yaw_dumbbell", "gyros_dumbbell_x")]
PMLTrainInUse[1,c("skewness_yaw_dumbbell", "gyros_dumbbell_x")]
PMLTrainInUse[1,"skewness_yaw_dumbbell"]
PMLTrainInUse[2,"skewness_yaw_dumbbell"]
PMLTrainInUse[,c("skewness_yaw_dumbbell", "gyros_dumbbell_x")]
str(PMLTrainInUse)
featurePlot(x = PMLTrainInUse[,c("magnet_dumbbell_z", "accel_forearm_y")],
y = PMLTrainInUse$classe,
plot = "density",
## Add a key at the top
auto.key = list(columns = 4))
featurePlot(x = PMLTrainInUse[,c("magnet_dumbbell_z", "accel_forearm_y")],
y = PMLTrainInUse$classe,
plot = "pair",
## Add a key at the top
auto.key = list(columns = 4))
featurePlot(x=PMLTrainInUse[,c("magnet_dumbbell_z", "accel_forearm_y")],
y = PMLTrainInUse$classe,
plot="pairs")
ForearmCol
PMLTrainInUse[, ForearmCol]
colPML[ForearmCol]
featurePlot(x=PMLTrainInUse[,colPML[ForearmCol]],
y = PMLTrainInUse$classe,
plot="pairs")
colPML[ForearmCol]
colPMLInUse<-colnames(PMLTrainInUse)
ForearmCol<- grep ( "_forearm",  colPMLInUse)
BeltCol<-colPML[ grep ( "_belt",  colPMLInUse)]
ArmCol<-colPML[ grep ( "_arm",  colPMLInUse)]
DumbbellCol<-colPML[ grep ( "dumbbell",  colPMLInUse)]
colPMLInUse[ForearmCol]
featurePlot(x=PMLTrainInUse[,colPMLInUse[ForearmCol]],
y = PMLTrainInUse$classe,
plot="pairs")
dim( PMLTrainInUse)
str( c(1,2))
#### Preparing training and test set
inTrain <- createDataPartition(y=PMLTrainInUse$classe,
p=0.75, list=FALSE)
training <- PMLTrainInUse[inTrain,]
testing <- PMLTrainInUse[-inTrain,]
dim( training)
M <- abs(cor(training[,-58]))
str(training)
colnames(training)
M <- abs(cor(training[,-54]))
M
diag(M) <- 0
which(M > 0.8,arr.ind=T)
M
M
dim(M)
Q<-which(M > 0.8,arr.ind=T)
dim (Q)
Q
str(Q)
Q[,1]
Q[,2]
rownames(Q)
unique ( rownames(Q) )
plot (training$yaw_belt, training$total_accel_arm)
plot (training$yaw_belt, training$total_accel_arm, colour = classesToAM())
plot (training$yaw_belt, training$total_accel_arm, colour = classe)
plot (training$yaw_belt, training$total_accel_arm, colour = training$classe)
qplot (training$yaw_belt, training$total_accel_arm, colour = training$classe)
MostVar<-unique ( rownames(Q) )
help ( "cor"
)
help("prcomp")
prcomp(PMLTrainInUse)
prcomp(PMLTrainInUse[,-54])
PrObj<-prcomp(PMLTrainInUse[,-54])
PrObj[1]
str(PrObj)
PrObj$rotation
PrObj$rotation[1]
PrObj$rotation["PC1"]
PrObj$rotation[,"PC1"]
plot(PrObj)
summary (PrObj)
plot (PrObj$x[1], PrObj$x[2])
plot (PrObj$x[,1], PrObj$x[,2])
plot (PrObj$x[,1], PrObj$x[,2])
typeColor <- ((as.numeric(spam$classe))*1 + 1)
dim( PrObj$x)
dim (PMLTrainInUse)
typeColor <- ((as.numeric(PMLTrainInUse$classe))*1 + 1)
typeColor
plot (PrObj$x[,1], PrObj$x[,2], col = typeColor )
plot (PrObj$x[,1], PrObj$x[,3], col = typeColor )
plot (PrObj$x[,1], PrObj$x[,4], col = typeColor )
plot (PrObj$x[,2], PrObj$x[,4], col = typeColor )
modelFit <- train(classe ~.,data=training, method="rpart")
modelfit$final
summary (modelfit)
summary (modelFit)
str(modelFit)
model$finalModel
model$finalmodel
model$Finalmodel
model$FinalModel
str(modelFit)
modelFit$finalModel
modelFit
predict( testing)
predict( modelFit, testing)
predictions<-predict( modelFit, testing)
confusionMatrix(predictions, testing$classe)
preProc <- preProcess(log10(training[,-54]+1),method="pca",pcaComp=2)
preProc <- preProcess(training[,-54],method="pca",pcaComp=2)
preProc
modelFit <- train(training$classe ~ .,method="glm",preProcess="pca",data=training)
modelFit <- train(training$classe ~ .,method="glm",preProcess="pca",data=training,pcaComp=5)
modelFit <- train(training$classe ~ .,method="rpart",preProcess="pca",data=training,pcaComp=5)
modelFit <- train(training$classe ~ .,method="rpart",preProcess="pca",data=training,pcaComp=2)
preProc <- preProcess(spam[,-54],method="pca",pcaComp=5)
preProc <- preProcess(PMLTrainInUse[,-54],method="pca",pcaComp=5)
preProc
trainPC <- predict(preProc,training[,-54])
trainPC
modelFit <- train(training$classe ~ .,method="glm",data=trainPC)
modelFit <- train(training$classe ~ .,method="rpart",data=trainPC)
confusionMatrix(testing$classe,predict(modelFit,testing))
testPC <- predict(preProc,testing[,-54])
confusionMatrix(testing$classe,predict(modelFit,testPC))
preProc <- preProcess(PMLTrainInUse[,-54],method="pca",pcaComp=10)
preProc <- preProcess(PMLTrainInUse[,-54],method="pca",pcaComp=10)
trainPC <- predict(preProc,training[,-54])
modelFit <- train(training$classe ~ .,method="rpart",data=trainPC)
testPC <- predict(preProc,testing[,-54])
confusionMatrix(testing$classe,predict(modelFit,testPC))
preProc <- preProcess(PMLTrainInUse[,-54],method="pca",pcaComp=20)
trainPC <- predict(preProc,training[,-54])
modelFit <- train(training$classe ~ .,method="rpart",data=trainPC)
testPC <- predict(preProc,testing[,-54])
confusionMatrix(testing$classe,predict(modelFit,testPC))
modelFit <- train(training$classe ~ .,method="rf",data=trainPC)
confusionMatrix(testing$classe,predict(modelFit,testPC))
nearZeroVar( PMLTrainInUse)
nzv<-nearZeroVar( PMLTrainInUse)
nzv[nzv$nzv,][1:10,]
nzv<-nearZeroVar( PMLTrainInUse, saveMetrics = TRUE )
nzv
nzv<-nearZeroVar( PMLTrain, saveMetrics = TRUE )
nzv<-nearZeroVar( PMLTrainInUse, saveMetrics = TRUE )
nzv
nzv<-nearZeroVar( PMLTrain, saveMetrics = TRUE )
nzv
help( nearZeroVarnearZeroVar)
help( nearZeroVar)
unique( PMLTrain$skewness_pitch_dumbbell)
table( PMLTrain$skewness_pitch_dumbbell)
nzv$freqRatio
a<-nzv$freqRatio
a[order(a)]
a[order(a, decreasing = TRUE)]
a[order(a, decreasing = TRUE)][1]
a[order(a, decreasing = TRUE)][1:10]
a<-nzv[nvz$freqRatio > 1000]
nvz
nzv
a<-nzv[nzv$freqRatio > 1000]
a<-nzv[nzv$freqRatio > 1000,]
a
a<-nzv[nzv$nzv==TRUE,]
a
confusionMatrix(testing$classe,predict(modelFit,testPC))
PMLtest<-read.csv (  file = "pml-testing.csv")
str( PMLtest)
str( PMLtest)
PMLtest$classe
trainPC <- predict(preProc,PMLtest)
qplot(wage,colour=education,data=training,geom="density")
featurePlot(x=PMLTrainInUse[,colPMLInUse[ForearmCol]],
y = PMLTrainInUse$classe,
plot="pairs")
str( PMLTrainInUse )
PMLTrainInUse$"num_window" <-  NULL
featurePlot(x = PMLTrainInUse[,c("magnet_dumbbell_z", "accel_forearm_y")],
y = PMLTrainInUse$classe,
plot = "pair",
## Add a key at the top
auto.key = list(columns = 4))
featurePlot(x=PMLTrainInUse[,colPMLInUse[ForearmCol]],
y = PMLTrainInUse$classe,
plot="pairs")
DumbbellCol
qplot(wage,colour=education,data=training,geom="density")
qplot("magnet_dumbbell_z",colour=MLTrainInUse$classe,data=PMLTrainInUse,geom="density")
qplot("magnet_dumbbell_z",colour=PMLTrainInUse$classe,data=PMLTrainInUse,geom="density")
qplot("magnet_belt_z",colour=PMLTrainInUse$classe,data=PMLTrainInUse,geom="density")
qplot("roll_arm" ,colour=PMLTrainInUse$classe,data=PMLTrainInUse,geom="density")
qplot("gyros_arm_x" ,colour=PMLTrainInUse$classe,data=PMLTrainInUse,geom="density")
qplot("magnet_arm_x" ,colour=PMLTrainInUse$classe,data=PMLTrainInUse,geom="density")
help (  preProcess)
plot( preProc)
preProc$call
preProc$median
modelFit
help (train)
library( doMc)
library( doMC)
modelFit$metric
modelFit$modelInfo
modelFit$mtry
modelFit$finalModel
class(train)
modelFit$finalModel[1]
modelFit$finalModel[2]
modelFit$finalModel[3]
modelFit$finalModel[4]
modelFit$finalModel[5]
modelFit$finalModel[6]
modelFit$finalModel[7]
modelFit$finalModel[8]
modelFit$finalModel[9]
modelFit$finalModel[10]
modelFit$finalModel[11]
modelFit$finalModel[12]
modelFit$finalModel[13]
modelFit$finalModel[14]
modelFit$finalModel[15]
modelFit$finalModel[16]
modelFit$finalModel[17]
modelFit$finalModel[18]
modelFit$finalModel[19]
modelFit$finalModel
modelFit$finalModel$inbag
nzv<-nearZeroVar( PMLTrain, saveMetrics = TRUE )
nzv
library( ggplot2)
library ( caret)
setwd( "C:/Users/Flomanu/Documents/Manu/Tech/R stuff/Practical Machine Learning/Assignement")
################################  Load Training data
PMLTrain<-read.csv (  file = "pml-training.csv")
##### Check column with missing values
colPML<-colnames( PMLTrain)
NAcol <-sapply (colPML, MyNa<-function (x) { sum ( is.na(PMLTrain[,x]) )}  )
nzv<-nearZeroVar( PMLTrain, saveMetrics = TRUE )
nzv
nzv [nzv==FALSE]
length(PMLTrain
)
nzv [nzv==TRUE]
length(nzv)
nrow(nzv)
nzv [nzv$nzv==TRUE]
nzv$nzv==TRUE
nzv[nzv$nzv==TRUE]
nzv[nzv$nzv==TRUE,]
nzv[nzv$nzv==FALSE,]
length( nzv[nzv$nzv==FALSE,] )
nrow( nzv[nzv$nzv==FALSE,] )
library( ggplot2)
library ( caret)
setwd( "C:/Users/Flomanu/Documents/Manu/Tech/R stuff/Practical Machine Learning/Assignement")
################################  Load Training data
PMLTrain<-read.csv (  file = "pml-training.csv")
##### Check column with missing values
colPML<-colnames( PMLTrain)
NAcol <-sapply (colPML, MyNa<-function (x) { sum ( is.na(PMLTrain[,x]) )}  )
####  NAcol column with NA value zero NAvalue
#### We keep PMLTrain column  with zero  NA value
PMLTrainInUse<-PMLTrain[NAcol==0]
PMLTrainNotUse<-PMLTrain[NAcol!=0]
####   93 columns kept over  160
#####  Remove Factor columns  --  Factor column contains DIV0 value
colPML<-colnames( PMLTrainInUse)
Factorcol <-sapply (colPML, MyFactor<-function (x) { sum ( x!="classe" && is.factor(PMLTrainInUse[,x]) )}  )
PMLTrainInUse<-PMLTrainInUse[Factorcol==0]
length(colnames(PMLTrain))
length(colnames(PMLTrainInUse))
####   56 columns kept over  160
#### Remove non Pertinent  Variable for prediction
PMLTrainInUse$"user_name" <-NULL
PMLTrainInUse$"X" <-NULL
PMLTrainInUse$"raw_timestamp_part_1" <-NULL
PMLTrainInUse$"raw_timestamp_part_2" <-NULL
PMLTrainInUse$"num_window" <-  NULL
colnames(PMLTrainInUse)
summary(PMLTrainInUse)
colnames(PMLTrainInUse)
nzv<-nearZeroVar( PMLTrainInUse, saveMetrics = TRUE )
nzv
